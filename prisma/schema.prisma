generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  firebaseUid String    @unique
  name        String
  email       String    @unique
  phone       String?
  role        Role      @default(USER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  addresses   Address[]
  cart        Cart?
  orders      Order[]
  reviews     Review[]
}

model Product {
  id            String         @id @default(uuid())
  name          String
  description   String
  price         Float
  discountPrice Float?
  stock         Int
  categoryId    String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  cartItems     CartItem[]
  orderItems    OrderItem[]
  category      Category        @relation(fields: [categoryId], references: [id])
  productImages ProductImage[]
  reviews       Review[]
}

model Category {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  products  Product[]
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
}

model OrderItem {
  id              String  @id @default(uuid())
  orderId         String
  productId       String
  quantity        Int
  priceAtPurchase Float
  order           Order   @relation(fields: [orderId], references: [id])
  product         Product @relation(fields: [productId], references: [id])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Address {
  id        String  @id @default(uuid())
  userId    String
  name      String
  phone     String
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  isDefault Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id])
}

model ProductImage {
  id        String  @id @default(uuid())
  productId String
  imageUrl  String
  altText   String?
  product   Product @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}
